{"version":3,"sources":["helpers/api.ts","components/User.tsx","components/Comment.tsx","store/index.ts","components/PostCard.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAppData","a","fetch","then","response","json","postsFromServer","usersFromServer","commentsFromServer","map","post","user","find","userId","id","comments","filter","comment","postId","User","name","postUser","className","Comment","body","email","getPosts","state","posts","isLoading","loading","hasError","errorMessage","getQuery","query","getVisiblePosts","title","toLocaleLowerCase","replace","includes","filterQuery","initialState","store","createStore","action","type","postTitle","composeWithDevTools","PostCard","dispatch","useDispatch","key","onClick","PostList","useSelector","App","setFilterQueryWithDebounce","useCallback","debounce","value","length","initPosts","catch","event","handleError","message","htmlFor","placeholder","onChange","target","setQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e62c0be1.chunk.js","sourcesContent":["export const getUsers = (): Promise<User[]> => {\n  return fetch('https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json')\n    .then(response => response.json());\n};\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch('https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json')\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch('https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json')\n    .then(response => response.json());\n};\n\nexport const getAppData = async () => {\n  const postsFromServer = await getPosts();\n  const usersFromServer = await getUsers();\n  const commentsFromServer = await getComments();\n\n  return postsFromServer.map((post: Post) => ({\n    ...post,\n    user: usersFromServer.find((user: User) => post.userId === user.id),\n    comments: commentsFromServer.filter((comment: Comment) => post.id === comment.postId),\n  }));\n};\n","import React from 'react';\n\ntype Props = {\n  postUser: User;\n};\n\nexport const User: React.FC<Props> = ({ postUser }) => {\n  const { name } = postUser;\n\n  return (\n    <>\n      <li className=\"user__item\">\n        <span className=\"user__name\">{name}</span>\n      </li>\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <p className=\"user_name\">\n        {name}\n      </p>\n      <p className=\"user_email\">\n        {email}\n      </p>\n      <p className=\"user_text\">\n        {body}\n      </p>\n    </>\n  );\n};\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst INIT_POSTS = 'INIT_TODOS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst DELETE_POST = 'DELETE_POST';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_FILTER_QUERY = 'SET_FILTER_QUERY';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const initPosts = (posts: Post[]) => ({\n  type: INIT_POSTS,\n  posts,\n});\nexport const handleError = (errorMessage: string) => ({\n  type: HANDLE_ERROR,\n  errorMessage,\n});\nexport const deletePost = (postTitle: string) => ({\n  type: DELETE_POST,\n  postTitle,\n});\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n});\nexport const setFilterQuery = (filterQuery: string) => ({\n  type: SET_FILTER_QUERY,\n  filterQuery,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoading = (state: RootState) => state.loading;\nexport const hasError = (state: RootState) => state.errorMessage;\nexport const getQuery = (state: RootState) => state.query;\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts.filter(({ title, body }) => (`${title} ${body}`)\n    .toLocaleLowerCase()\n    .replace(/\\s*/g, ' ')\n    .includes(state.filterQuery.toLocaleLowerCase().replace(/\\s*/g, ' ')));\n};\n\n// Initial state\nexport type RootState = {\n  posts: Post[];\n  loading: boolean;\n  errorMessage: string;\n  query: string;\n  filterQuery: string;\n};\n\nconst initialState: RootState = {\n  posts: [],\n  loading: false,\n  errorMessage: '',\n  query: '',\n  filterQuery: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        errorMessage: '',\n      };\n\n    case INIT_POSTS:\n      return {\n        ...state,\n        loading: false,\n        posts: action.posts,\n      };\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        loading: false,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.title !== action.postTitle),\n      };\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query,\n      };\n    case SET_FILTER_QUERY:\n      return {\n        ...state,\n        filterQuery: action.filterQuery,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { User } from './User';\nimport { Comment } from './Comment';\nimport { deletePost } from '../store';\n\ntype Props = {\n  post: Post;\n};\n\nconst PostCard: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n  const { title, body } = post;\n\n  return (\n    <>\n      <h2 className=\"post__title\">\n        {title}\n      </h2>\n      <ul className=\"post__user\">\n        { post.user\n        && (<User postUser={post.user} />)}\n      </ul>\n      <p className=\"post__text\">\n        {body}\n      </p>\n      <ul className=\"post__comments\">\n        {post.comments && post.comments.map(comment => (\n          <li className=\"post__comment\" key={comment.id}>\n            <Comment comment={comment} />\n          </li>\n        ))}\n      </ul>\n      <button\n        type=\"button\"\n        className=\"delete_button\"\n        onClick={() => dispatch(deletePost(title))}\n      >\n        Delete post\n      </button>\n    </>\n  );\n};\n\nexport default PostCard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport PostCard from './PostCard';\nimport { getVisiblePosts } from '../store';\n\nconst PostList = () => {\n  const posts = useSelector(getVisiblePosts);\n\n  return (\n    <ul className=\"post__list\">\n      {posts.map(post => (\n        <li className=\"post__item\" key={post.id}>\n          <PostCard post={post} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport { getAppData } from './helpers/api';\nimport PostList from './components/PostList';\n\nimport './App.scss';\nimport {\n  startLoading,\n  initPosts,\n  getPosts,\n  isLoading,\n  handleError,\n  hasError,\n  getQuery,\n  setQuery,\n  setFilterQuery,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const loading = useSelector(isLoading);\n  const errorMessage = useSelector(hasError);\n  const query = useSelector(getQuery);\n\n  const handleGetPosts = () => {\n    dispatch(startLoading());\n    getAppData()\n      .then(postsFromServer => {\n        dispatch(initPosts(postsFromServer));\n      })\n      .catch(event => {\n        dispatch(handleError(event.message));\n      });\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce((value: string) => dispatch(setFilterQuery(value)), 200),\n    [],\n  );\n\n  const handleSetQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(setQuery(value));\n    setFilterQueryWithDebounce(value);\n  };\n\n  return (\n    <div className=\"post\">\n      <h1 className=\"post__header\">Redux list of posts</h1>\n      {posts.length === 0 ? (\n        <button className=\"button\" type=\"button\" onClick={handleGetPosts}>\n          {loading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <div className=\"search\">\n            <label htmlFor=\"search\">\n              <input\n                className=\"search__form\"\n                placeholder=\"filter posts\"\n                type=\"text\"\n                id=\"search\"\n                value={query}\n                onChange={handleSetQuery}\n              />\n            </label>\n          </div>\n          <PostList />\n        </>\n      )}\n      {errorMessage && (\n        <p className=\"post__error\">\n          {`Error: ${errorMessage}`}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}